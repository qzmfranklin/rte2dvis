################################################################################
#				STEP 1
#PROJECT NAME, VERSION, AND DATE INFORMATION.
#	Be careful! Do NOT accidentally insert some spaces!
# ${RELEASE_NAME} is the name of the tarball generated when one enters
# 	$ make dist
PROJECT_NAME	:=rte2dvis
VERSION		:=v0.01
DATE_TIME	:=$(shell date "+%Y-%m-%d")
RELEASE_NAME	:=${PROJECT_NAME}-${VERSION}-${DATE_TIME}
AUTHOR_NAME	:=Zhongming Qu
AUTHOR_EMAIL	:=qzmfrank@umich.edu
###############################################################################
#				STEP 2
#QUIET MODE
#	One can comment out the following line to get into verbose mode. Note,
#  however, this flag does NOT control the directory specific building rules.
#  If one wishes to turn on the verbose flag for a specific subdirectoy, one 
#  needs to go to that subdirectory and modify the QUIET flag in that 
#  makevars.mk. This is done so to help debugging the build system itself.
#  	Usually no need to turn to the verbose mode.
QUIET		:=@
###############################################################################
#				STEP 3
#PROJECT STRUCTURAL DIRECTORIES
#	This part follows the usual convention of GNU projects. Modify it only
#  when one has very strong reasons.
#  	Note that the building is completely out-of-source.
SRC		:=src
INCLUDE		:=include
EXAMPLE		:=example# Data files for various tests
BUILD		:=build# Out-of-source build
OBJ		:=${BUILD}/obj
BIN		:=${BUILD}/bin
LIB		:=${BUILD}/lib
ASM		:=${BUILD}/ASM# Assembly codes
DEBUG		:=${BUILD}/DEBUG# Debugging output
OUTPUT		:=${BUILD}/OUTPUT# Output 
STRUCTURAL_DIRS	:=${BUILD} ${OBJ} ${BIN} ${LIB} ${ASM} ${DEBUG} ${OUTPUT}
###############################################################################
#				STEP 4
#PROJECT-WIDE COMMON COMPILATION OPTIONS
#	The author of this set of template files is using a MacBookPro. If one 
#  needs to build the same project in a different architecture, e.g., Linux or
#  other Unix-like system, one would most probably only need to modify the 
#  compiling options and linking libraries below. Of course, if one has some
#  architecture-dependent options in some subdirectories, he/she also needs to
#  modify those parts accordingly.
#  	All the subdirectories inherit the compiling and linking options 
#  specified in this STEP. Note that one _cannot_ drop any of the global 
#  compiling and linking options. So only specify options that are definitely 
#  needed by the entire project here.
#
#  	Update 2013-12-06: Changed ${CC} to icpc. In general, there is no
#  explicit harm for using icpc for both compiling and linking. As long as
#  the programmer confines himself to using standard C++ languages, the
#  code should still be portable. The drawback, however, is obvious. One
#  might inadvertently use some C++ features in some otherwise pure C
#  codes, making the the code imcompatible with C compilers. This can be a
#  problem if this project needs to talk to another C project. However, in
#  that case, why do we just use C++ altogether? Even for scientific
#  computation, C++ is good enough as long as we refrain from using the
#  fancy features, such as templates and virtual functions, of C++.
CC		:=icpc
CXX		:=icpc
# Compiling options for .c files:
CFLAGS 		:=-O3							\
		-Wall							\
		-prec-div -no-ftz					\
		-MMD -MP						\
		-restrict						\
		-fPIC							\
		-openmp							\
		-fno-inline-functions					\
		-Wno-deprecated

		# 							\
		-DNDEBUG						\
		-unroll-aggressive					\
		-fno-math-errno						\
		-DDEBUG							\
		-opt-report-phase ipo_inl				\
		-vec-report=1						\

CXXFLAGS	:=${CFLAGS}# Compilig options for .cpp files.
ASMFLAGS	:=-S -fsource-asm# Source code commeNted assembly code.
ifeq ($(shell uname),Darwin)
	DYLFLAGS:=-dynamiclib# Create dynamic library in MacOSX-x86-64
else
	DYLFLAGS:=-shared# in Linux
endif
###############################################################################
#				STEP 5
#PROJECT-WIDE INCLUDE AND LINKAGE OPTIONS
#	This part shall also be modified in accordance to the previous part.
#	Intel Math Kernel Library for MacOSX-x86-64
MKL_INCS	:=
MKL_LIBS	:=-mkl
#	OpenMP Flags
OMP_INCS	:=
OMP_LIBS	:=-openmp

#	OpenMPI Library
#MPI_INCS	:='mpicxx -showme:compile'
#MPI_LIBS	:='mpicxx -showme:link'
#	MathLink for MacOSX-x86-64
#ML_DIR		:=/Applications/Mathematica.app/SystemFiles/Links/MathLink/DeveloperKit/MacOSX-x86-64/CompilerAdditions/
#ML_INCS		:=-I${ML_DIR}
#ML_LIBS		:=-L${ML_DIR} -lMLi3 -lstdc++ -framework Foundation
#MPREP		:=${ML_DIR}/mprep
#	LibraryLink for MacOSX-x86-64
#MLL_INCS	:=-I/Applications/Mathematica.app/SystemFiles/IncludeFiles/C/
#MLL_LIBS	:=-L/Applications/Mathematica.app/SystemFiles/Libraries/MacOSX-x86-64/
#PROJECT-WIDE DEFAULT LINKING LIBRARIES AND INCLUDE DIRECTORIES
INCS		:=-iquote ${INCLUDE} ${MKL_INCS} ${OMP_INCS} ${MPI_LIBS}
LIBS		:=${MKL_LIBS} ${OMP_LIBS} ${MPI_LIBS}
##	LONESTAR COMPILING OPTIONS
#CFLAGS 	:= -O3 -prec-div -no-ftz -restrict -Wshadow -MMD -MP

#MPIINC 	:= `mpiCC -showme:compile`
#FFTWINC := -I $$FFTW_INC
#MKLINC 	:= -I $$MKL_INC

#MKLLIBS := -L$$MKL_LINK -lmkl_intel_lp64 -lmkl_sequential -lmkl_core 	\
	#-lpthread
#MKLTHRD := -L$$MKL_LINK -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core 	\
	#-lpthread -lm
#FFTWLIB :=  -L $$FFTW_LINK -lfftw3
#MPILIBS := `mpiCC -showme:link`
