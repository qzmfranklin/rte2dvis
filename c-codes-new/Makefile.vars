################################################################################
#  A set of template files to organize projects with a single Makefile
#  Copyright (C) 2013 Zhongming Qu <qzmfrank@umich.edu>
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
################################################################################
#	Welcome! The comments in this file will guide you through the process.
#  Please read all the comments very carefully before changing anything.
#  	The idea of this set of template files (Makefile, Makefile.vars, and
#  all the makevars.mk) is to help organize any C/C++ project with a single
#  Makefile. The advantage is speed. The usual drawback are bad maintainence
#  and modularity. This set of files attempt to cut down all the repetitive
#  work that are usually done manually, i.e., listing target-prerequisites
#  while preserving almost the same degree of modularity as the recursive
#  make approach.
#  TODO:
#  	Write up python or perl scripts that can scan the src/ directory
#  and generate a single Makefile at the top level. The authors has not done
#  this mainly for two reasons: a) He does not know python or perl any well;
#  b) There is still room for improvement in this set of template files.
#  The author wishes to wait until it
#  	a) is tested on several different Linux clusters, and
#  	b) fully supports dynamic _and_ static libraries and executables, and
#  	c) capable of handling primary configure such as DEBUG and RELEASE, and
#  	d) if possible, supports Fortran files well (to appeal to a larger
#  	audience).
#  
#  	The make utility is a good thing. But GNU make lacks in its fundamental
#  design the respect and support for the hierachy of source file directories
#  that are very compilcated for any project with more than a hundred files.
#  Version control and project build are the two most important deeds in 
#  programming, though often their importance is not fully acknowledged. Version
#  control software had Git replaced SVN and CVS. Maybe the call for a better
#  build tool would in time render the long-lived GNU make obselete. People
#  have to come up with ways to do it right. CMake is very good at portability.
#  However, portability also makes CMake less friendly to many of its quasi-
#  expert users, who, just like the author, would like to be able to modify
#  some of the CMake-generated Makefiles.
#  	What it does is to create a building tool based on GNU make and some
#  script files that can do the build in only one pass, and best of all, without
#  introducing any new syntax. Such a simple goal makes the implementation
#  simple and stable. But it only works on Unix-like platforms that has bash
#  shell and python/perl installed. The author would say that this is a, though
#  not big, limitation.
#  	Unlike many other attempts of creating an universally fit building tool
#  for everyone at everywhere at anytime, e.g., CMake, this set of templates,
#  with possible future scripts, aims to do only thing and do it well. The
#  ultimate goal is to realize building with only one pass.
#  	If you have any suggestions and/or ideas, please let me know.
################################################################################
#		PHONY TARGETS AT THE TOP LEVEL
TARGET_ALL	:=
TARGET_TEST	:=
TARGET_ASM	:=
TARGET_LIST	:=
#		DEPENDENCY FILES
DEPFILES	:=# Dependency files: *.d
#		DISTRIBUTION FILES
SRCFILES	:=# All source files: *.c *.cpp
HDRFILES	:=$(wildcard ${INCLUDE}/*)# All header files
MAKFILES	:=$(wildcard Makefile*) \
	makevars.mk.template# the ./makevars.mk is the template
MKVFILES	:=$(shell find ${SRC} -type f -name "makevars.mk")# All the makevars.mk's
DOCFILES	:=# Documentation
MANFILES	:=# Manuals
EXPFILES	:=$(wildcard ${EXAMPLE}/*)# Examples
################################################################################
#		CLEAR ALL EXISTING PATTERN RULES
.SUFFIXES:
.SUFFIXES:.tm .c .cpp .o .exe .s .d .dylib .a .so .S
#		TOP LEVEL C++ LINKAGE PATTERN RULES
#  	All executables have extension exe. 
#  	All dynamic libraries have extension so.
#  	No longer make any structural distinction between binaries that are
#  considered tests and final outputs.
#  	Note that this pattern rule is not inclusive. Just as a convenience
#  rule.
MY_LIBS		=-Bstatic -L${LIB} \
		 $(patsubst ${LIB}/lib%.a,-l%,$^) \
		 -Bdynamic
LNKFLAGS:=
ifeq (${PLATFORM},Linux)
	DYLFLAGS:=-shared
	STLFLAGS:=
endif
ifeq (${PLATFORM},Darwin)
	DYLFLAGS:=-dynamiclib
	STLFLAGS:=-staticlib
endif
${BIN}/%.exe: ${OBJ}/%.o 
	@echo Linking  "${B_RED}$@${NONE}"...
	${QUIET}${CXX} -o $@ $(filter %.o,$^) ${LIBS} ${LNKFLAGS} \
		-Bstatic -L${LIB} \
		$(patsubst ${LIB}/lib%.a,-l%,$(filter %.a,$^)) \
		-Bdynamic
${LIB}/lib%.so: ${OBJ}/%.o
	@echo Linking "${B_MAGENTA}$@${NONE}"...
	${QUIET}${CXX} -o $@ $(filter %.o,$^) ${LIBS} ${DYLFLAGS} \
		-Bstatic -L${LIB} \
		$(patsubst ${LIB}/lib%.a,-l%,$(filter %.a,$^)) \
		-Bdynamic
${LIB}/lib%.a: ${OBJ}/%.o
	@echo Linking "${B_MAGENTA}$@${NONE}"...
ifeq (${PLATFORM},Linux)
	${QUIET}ar rc $@ $(filter %.o,$^)
endif
ifeq (${PLATFORM},Darwin)
	${QUIET}${CXX} -o $@ $(filter %.o,$^) ${LIBS} ${STLFLAGS} \
		-Bstatic -L${LIB} \
		$(patsubst ${LIB}/lib%.a,-l%,$(filter %.a,$^)) \
		-Bdynamic
endif
################################################################################
#		COLORFUL SHELL ECHO!
NONE		:=\033[00m 
#	Normal colors
BLACK		:=\033[00;30m
RED		:=\033[00;31m
GREEN		:=\033[00;32m
BROWN		:=\033[00;33m 
BLUE		:=\033[00;34m
MAGENTA		:=\033[00;35m
CYAN		:=\033[00;36m
GREY		:=\033[00;37m 
#	Bold
B_BLACK		:=\033[01;30m
B_RED		:=\033[01;31m
B_GREEN		:=\033[01;32m
B_BROWN		:=\033[01;33m 
B_BLUE		:=\033[01;34m
B_MAGENTA	:=\033[01;35m
B_CYAN		:=\033[01;36m
B_GREY		:=\033[01;37m 
#	Underlined
U_BLACK		:=\033[04;30m
U_RED		:=\033[04;31m
U_GREEN		:=\033[04;32m
U_BROWN		:=\033[04;33m 
U_BLUE		:=\033[04;34m
U_MAGENTA	:=\033[04;35m
U_CYAN		:=\033[04;36m
U_GREY		:=\033[04;37m 
#	Blinking
BLK_BLACK	:=\033[05;30m
BLK_RED		:=\033[05;31m
BLK_GREEN	:=\033[05;32m
BLK_BROWN	:=\033[05;33m 
BLK_BLUE	:=\033[05;34m
BLK_MAGENTA	:=\033[05;35m
BLK_CYAN	:=\033[05;36m
BLK_GREY	:=\033[05;37m 
#	Reversed foreground and background color
REV_BLACK	:=\033[07;30m
REV_RED		:=\033[07;31m
REV_GREEN	:=\033[07;32m
REV_BROWN	:=\033[07;33m 
REV_BLUE	:=\033[07;34m
REV_MAGENTA	:=\033[07;35m
REV_CYAN	:=\033[07;36m
REV_GREY	:=\033[07;37m 
