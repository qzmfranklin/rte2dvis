#DIRECTORY NAME FROM THE ROOT DIRECTORY
#  Be very careful:
# 	NO SPACE ( tab is OK )
# 	NO DEFERRED-EVALUATION ( always use colon-equal, i.e., := ) #
DIR		:=src/QuadratureRules# Please, NO SPACE




#DIRECTORY-SPECIFIC SOURCE FILES
#  	Remember to add the ${DIR}/ to whatever source files(s) you wish to add.
#  The dependencies are automatically resolved by the dependency files (*.d 
#  files) generated by the compiler through the -MD -MP and/or similar options.
#  Note that:
#  	a) The GNU make does NOT support recursive include directive. So we must
#  NOT include any *.d file in this file. All the *.d files are included in the
#  Makefile in the root directory AFTER all the makevars.mk's are include.
#  	b) ${DIR}TSTFILES are various testing files for the subdirectory it
#  resides. Usually we can pack up all the neccessary testing functions into
#  a single test file. But in case multiple test files are a must, please name
#  each and all of the test files in the following pattern:
#
#  				test-[description].cpp
#
#  		i)    [description] must be distinct in the entire project;
#  		ii)   Must use CPP as the extension name, even with some other
#  		source C files.
#  		iii)  The output EXE file will be in the ${BUILD} directory.
${DIR}CPPFILES	:=		${DIR}/DunavantRule.cpp 			\
				${DIR}/WandzuraRule.cpp				\
				${DIR}/GaussQuadratures.cpp

${DIR}TSTFILES :=${DIR}/${DIR}-test.cpp# Testing source files



#DIRECTORY-SPECIFIC BINARIES TO BE PUT INTO ${BIN}
#  	These binaries are oftern small tool executables that does a specific 
#  job. For example: file-io/mshtodat.exe (scans MSH file, export nodes and 
#  triangles). Note that:
# 	a) The ${BUILD}/${DIR}-test.exe files should NOT be included;
# 	b) It is the programmer's job (at least for now) to make sure that all
#  the files listed in ${DIR}BINFILES have proper build rules, which are usally 
#  specified in the binary targets region;
#  	c) The binary files should be put into the ${BIN} directory and with
#  the required EXE extension. For example:
#
#  				${BIN}/binarytarget1.exe
#
#  	d) The default compiling and linking options for ${DIR}BINFILES are the
#  same as that of the directory, stated by the pattern rule:
#
#  				${BIN}/%.exe: ${DIR}/*.o
#
#  If one wishes to assign different compiling and linking options to any
#  spcific binary, he/she will have to specify the complete TARGET-PREREQUISITE
#  rule for that binary in the next part, i.e., DIRECTORY-SPECIFIC BINARY
#  TARGETS.
${DIR}BINFILES	:=




#DIRECTORY-SPECIFIC BINARY TARGETS
#  	The first target is by default the ${BUILD}/${DIR}-test.exe. It should 
#  test all the major functionalities of source files in this directory. The 
#  second and later targets, if any, should correspond to each and all of the 
#  files listed in ${DIR}BINFILES. It is the programmer's job to keep it up.
${BUILD}/${DIR}-test.exe: 	${BUILD}/${${DIR}:src/%=%}-test.o		\
				${BUILD}/GaussQuadratures.o 			\
				${BUILD}/DunavantRule.o 			\
				${BUILD}/WandzuraRule.o 




#DIRECTORY-SPECIFIC COMPILING AND LINKING OPTIONS
#  	By default, the local options inherits the corresponding global ones 
#  from the makevars.mk in the root directory. If one wishes to add any 
#  additional options that are specific to this very directory, add them after 
#  the global ones. For example:
# 	 	${DIR}CFLAGS	:=${CFLAGS} [directory-specific options]
#  	Usually, ${DIR}INCS and ${DIR}LIBS should not need to be modified if
#  the build in this directory does not require some extra libraries and/or 
#  hearder files. But in case it did, free at ease to modify these two 
#  variables.
${DIR}CFLAGS 	:=${CFLAGS}
${DIR}CXXFLAGS	:=${CXXFLAGS} \
	-Wno-deprecated # No warning on deprecated and/or antiquiated headers
${DIR}INCS	:=${INCS}
${DIR}LIBS	:=${LIBS}




###############################################################################
###############################################################################
###############################################################################
#				WANRING
#  Please do not modify the following part if you are not 100% sure about it.
#  The design of this file is that one only needs to modify the part above.
#  If you find you need to modify any of the parts below, be very careful!
#				WANRING
###############################################################################
###############################################################################
###############################################################################



#DIRECTORY-SPECIFIC FILES
${DIR}OBJFILES :=${${DIR}CPPFILES:${DIR}%.cpp=${BUILD}%.o}# Object Files
${DIR}DEPFILES :=${${DIR}OBJFILES:%.o=%.d}# Dependency Files in the same directory as .o files
${DIR}ASMFILES :=${${DIR}CPPFILES:${DIR}%.cpp=${DEBUG}%.s}# Commented Assembly Codes

OBJFILES:=${OBJFILES} ${${DIR}OBJFILES}
DEPFILES:=${DEPFILES} ${${DIR}DEPFILES}
ASMFILES:=${ASMFILES} ${${DIR}ASMFILES}




#DIRECTORY-SPECIFIC PATTERN RULES
#  C++ linkage at the top level
#  Default pattern rule for binaries in this directory
${BIN}/%.exe: ${BUILD}/%.o
	@echo Linking executable "${B_RED}$@${NONE}"...
	@${CXX} -o $@ ${filter %.o,$^} ${${DIR}LIBS} 

${BUILD}/%.exe: ${BUILD}/%.o 
	@echo Linking executable "${B_RED}$@${NONE}"...
	@${CXX} -o $@ ${filter %.o,$^} ${${DIR}LIBS} 
#  C++ sources
${BUILD}/%.o: ${DIR}/%.cpp
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CXX} -o $@ -c $< ${${DIR}CXXFLAGS} ${${DIR}INCS}
${DEBUG}/%.s: ${DIR}/%.cpp
	@echo Generating "${CYAN}$@${NONE}"...
	@${CXX} -o $@ $< ${ASMFLAGS} ${${DIR}CXXFLAGS} ${${DIR}INCS} 
#  C sources
${BUILD}/%.o: ${DIR}/%.c
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CC} -o $@ -c $< ${${DIR}CFLAGS} ${${DIR}INCS}
${DEBUG}/%.s: ${DIR}/%.c
	@echo Generating "${CYAN}$@${NONE}"...
	@${CC} -o $@ $< ${ASMFLAGS} ${${DIR}CFLAGS} ${${DIR}INCS} 




#DIRECTORY-SPECIFIC PHONY TARGETS
.PHONY: ${DIR}-all ${DIR}-check ${DIR}-test
${DIR}-all: ${${DIR}OBJFILES} ${${DIR}BINFILES}
	@echo Finished building "${RED}${DIR}${NONE}".
${DIR}-check:
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}${DIR}${NONE}"\#\#\#\#\#\#\#\#
	@echo "${BROWN}${DIR}CPPFILES${NONE}"= ${${DIR}CPPFILES}
	@echo "${BROWN}${DIR}OBJFILES${NONE}"= ${${DIR}OBJFILES}
	@echo "${BROWN}${DIR}DEPFILES${NONE}"= ${${DIR}DEPFILES}
	@echo "${BROWN}${DIR}ASMFILES${NONE}"= ${${DIR}ASMFILES}
${DIR}-test: ${BUILD}/${DIR}-test.exe
	@echo Running "${B_BROWN}$<${NONE}"...
	@./$< > ${DEBUG}/${DIR}-test.txt
	@echo Output to "${GREEN}${DEBUG}/${DIR}-test.txt${NONE}".
