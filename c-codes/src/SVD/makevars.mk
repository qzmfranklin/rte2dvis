###############################################################################
#  A set of template files to organize projects with a single Makefile
#  Copyright (C) 2013 Zhongming Qu <qzmfrank@umich.edu>
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
###############################################################################
#	Welcome! The comments in this file will guide you through the process.
#  Please read all the comments very carefully before changing anything.
#  	The idea of this set of template files (Makefile, Makefile.vars, and
#  all the makevars.mk) aim to help organize any C/C++ project with a single
#  Makefile. The advantage is speed. The usual drawback are bad maintainence
#  and modularity. This set of files attempt to cut down all the repetitive
#  work that are usually done manually, i.e., listing target-prerequisites
#  while preserving almost the same degree of modularity as the recursive
#  make approach.
#  	If you have any suggestions and/or ideas, please let me know.
###############################################################################
#				STEP 1
#DIRECTORY NAME FROM THE ROOT DIRECTORY
#  Be very careful:
# 	NO SPACE ( tab is OK )
# 	NO DEFERRED-EVALUATION ( always use colon-equal, i.e., := ) #
DIR005		:=src/SVD# Please, NO SPACE 
###############################################################################
#				STEP 2
#DIRECTORY-SPECIFIC SOURCE FILES
#  	Remember to add the ${DIR005}/ to whatever source files(s) you wish to add.
#  The dependencies are automatically resolved by the dependency files (*.d 
#  files) generated by the compiler through the -MD -MP and/or similar options.
#  Note that:
#  	a) The GNU make does NOT support recursive include directive. So we must
#  NOT include any *.d file in this file. All the *.d files are included in the
#  Makefile in the root directory AFTER all the makevars.mk's are include.
#  	b) So far, only supports C/C++ files. Maybe Fortran support is needed TODO
#  	c) Please refrain from using $(wildcard) command. It only helps when not
#  really nessaccery and complicates the situation when we have forgotten about
#  it. Yes, be explicit. Manually list all the source files here.
#  	d) Dependencies are readily dealt with by the setup of the Makefile. One
#  NEVER needs to specify the dependency for any .o file.
${DIR005}CFILES		:=
${DIR005}CPPFILES	:=	${DIR005}/SVD.cpp
################## DO NOT MODIFY ################
${DIR005}OBJFILES	:=	${${DIR005}CPPFILES:${DIR005}%.cpp=${BUILD}%.o}	\
				${${DIR005}CFILES:${DIR005}%.c=${BUILD}%.o}
${DIR005}DEPFILES	:=	${${DIR005}OBJFILES:%.o=%.d}
${DIR005}ASMFILES	:=	${${DIR005}OBJFILES:${BUILD}%.o=${DEBUG}%.s}
################## DO NOT MODIFY ################ 
###############################################################################
#				STEP 3
#DIRECTORY-SPECIFIC BINARY FILES
#	Executables listed in ${DIR}BINFILES are considered the final output of
#  this project. All of them should be built into ${BIN} instead of ${BUILD}
#  for all other executables. 
#  	So far, only supports CPP source files. TODO
${DIR005}BIN	:=		
################## DO NOT MODIFY ################
${DIR005}BINCPP	:=		${${DIR005}BIN:%=${DIR005}/%.cpp}
${DIR005}BINOBJ	:=		${${DIR005}BINCPP:${DIR005}%.cpp=${BUILD}%.o}
${DIR005}BINDEP	:=		${${DIR005}BINOBJ:%.o=%.d}
${DIR005}BINEXE	:=		${${DIR005}BINOBJ:${BUILD}%.o=${BIN}%.exe}
${DIR005}BINASM	:=		${${DIR005}BINOBJ:${BUILD}%.o=${DEBUG}%.s}
################## DO NOT MODIFY ################
#  The default build rule for ${DIR005}BINEXE is:
#${${DIR005}BINEXE}: ${${DIR005}BINOBJ} ${${DIR005}OBJFILES} 
#  Comment the above line and specify your own rules here:
#  Note that we can take advantage of the following pattern rule:
#		rule ${BIN}/%.exe: ${BUILD}/%.o
###############################################################################
#				STEP 4
#DIRECTORY-SPECIFIC TEST FILES
#	Speicify all the test files. All test files must be CPP files. But when
#  listing the them in ${DIR005}TST, do NOT write the .cpp extension. For example:
#  if one wishes to add test-mytest.cpp, he should write:
#
#  		${DIR005}TST:=test-mytest
#
${DIR005}TST	:=		test-SVD
################## DO NOT MODIFY ################
${DIR005}TSTCPP	:=		${${DIR005}TST:%=${DIR005}/%.cpp}
${DIR005}TSTOBJ	:=		${${DIR005}TSTCPP:${DIR005}%.cpp=${BUILD}%.o}
${DIR005}TSTDEP	:=		${${DIR005}TSTOBJ:%.o=%.d}
${DIR005}TSTEXE	:=		${${DIR005}TSTOBJ:%.o=%.exe}
${DIR005}TSTASM	:=		${${DIR005}TSTOBJ:${BUILD}%.o=${DEBUG}%.s}
SRCFILES	:=		${SRCFILES} ${${DIR005}CFILES} ${${DIR005}CPPFILES} ${${DIR005}TSTCPP} ${${DIR005}BINCPP}
DEPFILES	:=		${DEPFILES} ${${DIR005}DEPFILES} ${${DIR005}TSTDEP} ${${DIR005}BINDEP}
################## DO NOT MODIFY ################
#  The default build rule for ${DIR005}BINEXE is:
${${DIR005}TSTEXE}: ${${DIR005}TSTOBJ} ${${DIR005}OBJFILES} 
#  This is using all the object files generated in this directory plus the
#  object files of the test CPP files. In case where this is either not enough
#  or too much, please modify the following line.
#  Comment the default build rule and specify your own rules here:
#  Note that we can take advantage of the following pattern rule:
#		rule ${BIN}/%.exe: ${BUILD}/%.o
#${BIN}/mshtodat.exe: ${BUILD}/mshtodat.o ${BUILD}/file-io.o 
###############################################################################
#				STEP 5
#DIRECTORY-SPECIFIC COMPILING AND LINKING OPTIONS
#	Options specified here are used in this directory. By default, all 
#  builds use the same options. When different compiling and/or linking options 
#  need to be assigned to different targets, the programmer needs to list all
#  the speical target-prerequisite dependencies manually.
#  	By default, the local options inherits the corresponding global ones 
#  from the makevars.mk in the root directory. If one wishes to add any 
#  additional options that are specific to this very directory, add them after 
#  the global ones. For example:
# 	 	${DIR005}CFLAGS	:=${CFLAGS} [directory-specific options]
#  	Usually, ${DIR005}INCS and ${DIR005}LIBS should not need to be modified if
#  the build in this directory does not require some extra libraries and/or 
#  hearder files. But in case it did, free at ease to modify these two 
#  variables.
${DIR005}CFLAGS 	:=${CFLAGS}
${DIR005}CXXFLAGS	:=${CXXFLAGS}
${DIR005}INCS		:=${INCS}
${DIR005}LIBS		:=${LIBS} 
###############################################################################
#				STEP 6
#	Write whatever extra dependencies here:
${BUILD}/test-SVD.exe: ${BUILD}/Utils.o



###############################################################################
###############################################################################
###############################################################################
#	Congratulations! You have completed everything you need to do to build
#  this directory. You do not need to modify this file unless some C and/or
#  CPP source files are added, removed, or renamed. In that case, just go over
#  STEP 1-6 again and it is done!
###############################################################################
###############################################################################
###############################################################################
#				WANRING
#  Please do not modify the following part if you are not 100% sure about it.
#  The design of this file is that one only needs to modify the part above.
#  If you find you need to modify any of the parts below, be very careful!
#				WANRING
###############################################################################
###############################################################################
############################################################################### 
#DIR005ECTORY-SPECIFIC PATTERN RULES
#  C++ linkage at the top level
${BIN}/%.exe: ${BUILD}/%.o 
	@echo Linking  "${B_RED}$@${NONE}"...
	@${CXX} -o $@ ${filter %.o,$^} ${${DIR005}LIBS} 
${BUILD}/%.exe: ${BUILD}/%.o 
	@echo Linking  "${RED}$@${NONE}"...
	@${CXX} -o $@ ${filter %.o,$^} ${${DIR005}LIBS} 
#  C++ sources
${BUILD}/%.o: ${DIR005}/%.cpp
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CXX} -o $@ -c $< ${${DIR005}CXXFLAGS} ${${DIR005}INCS}
${DEBUG}/%.s: ${DIR005}/%.cpp
	@echo Generating "${CYAN}$@${NONE}"...
	@${CXX} -o $@ $< ${ASMFLAGS} ${${DIR005}CXXFLAGS} ${${DIR005}INCS} 
#  C sources
${BUILD}/%.o: ${DIR005}/%.c
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CC} -o $@ -c $< ${${DIR005}CFLAGS} ${${DIR005}INCS}
${DEBUG}/%.s: ${DIR005}/%.c
	@echo Generating "${CYAN}$@${NONE}"...
	@${CC} -o $@ $< ${ASMFLAGS} ${${DIR005}CFLAGS} ${${DIR005}INCS} 
#DIR005ECTORY-SPECIFIC PHONY TARGETS
.PHONY: ${DIR005}-all ${DIR005}-test ${DIR005}-asm ${DIR005}-list
TARGET_ALL	:=${TARGET_ALL} ${DIR005}-all
TARGET_TEST	:=${TARGET_TEST} ${DIR005}-test
TARGET_ASM	:=${TARGET_ASM} ${DIR005}-asm
TARGET_LIST	:=${TARGET_LIST} ${DIR005}-list
${DIR005}-all: ${${DIR005}OBJFILES} ${${DIR005}BINEXE}
	@echo Finished building "${B_BLUE}$@${NONE}".
${DIR005}-test: ${${DIR005}TSTEXE}
	@echo Finished building "${B_BLUE}$@${NONE}".  
${DIR005}-asm: ${${DIR005}ASMFILES} ${${DIR005}TSTASM}
	@echo Finished generating "${B_BLUE}$@${NONE}".  
${DIR005}-list:
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}BEGIN $@${NONE}"\#\#\#\#\#\#\#\#
	@echo "${BROWN}CFILES${NONE}":${${DIR005}CFILES}
	@echo "${BROWN}CPPFILES${NONE}":${${DIR005}CPPFILES}
	@echo "${BROWN}OBJFILES${NONE}":${${DIR005}OBJFILES}
	@echo "${BROWN}DEPFILES${NONE}":${${DIR005}DEPFILES}
	@echo "${BROWN}ASMFILES${NONE}":${${DIR005}ASMFILES}
	@echo "${BROWN}TSTCPP${NONE}":${${DIR005}TSTCPP}
	@echo "${BROWN}TSTOBJ${NONE}":${${DIR005}TSTOBJ}
	@echo "${BROWN}TSTDEP${NONE}":${${DIR005}TSTDEP}
	@echo "${BROWN}TSTEXE${NONE}":${${DIR005}TSTEXE}
	@echo "${BROWN}TSTASM${NONE}":${${DIR005}TSTASM} 
	@echo "${BROWN}BINCPP${NONE}":${${DIR005}BINCPP}
	@echo "${BROWN}BINOBJ${NONE}":${${DIR005}BINOBJ}
	@echo "${BROWN}BINDEP${NONE}":${${DIR005}BINDEP}
	@echo "${BROWN}BINEXE${NONE}":${${DIR005}BINEXE}
	@echo "${BROWN}BINASM${NONE}":${${DIR005}BINASM} 
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}END $@${NONE}"\#\#\#\#\#\#\#\#
