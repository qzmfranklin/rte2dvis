###############################################################################
#  A set of template files to organize projects with a single Makefile
#  Copyright (C) 2013 Zhongming Qu <qzmfrank@umich.edu>
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
###############################################################################
#	Welcome! The comments in this file will guide you through the process.
#  Please read all the comments very carefully before changing anything.
#  	The idea of this set of template files (Makefile, Makefile.vars, and
#  all the makevars.mk) aim to help organize any C/C++ project with a single
#  Makefile. The advantage is speed. The usual drawback are bad maintainence
#  and modularity. This set of files attempt to cut down all the repetitive
#  work that are usually done manually, i.e., listing target-prerequisites
#  while preserving almost the same degree of modularity as the recursive
#  make approach.
#  	If you have any suggestions and/or ideas, please let me know.
###############################################################################
#				STEP 1
#DIRECTORY NAME FROM THE ROOT DIRECTORY
#  Be very careful:
# 	NO SPACE ( tab is OK )
# 	NO DEFERRED-EVALUATION ( always use colon-equal, i.e., := ) #
DIR002		:=src/Utils# Please, NO SPACE 
###############################################################################
#				STEP 2
#DIRECTORY-SPECIFIC SOURCE FILES
#  	Remember to add the ${DIR002}/ to whatever source files(s) you wish to add.
#  The dependencies are automatically resolved by the dependency files (*.d 
#  files) generated by the compiler through the -MD -MP and/or similar options.
#  Note that:
#  	a) The GNU make does NOT support recursive include directive. So we must
#  NOT include any *.d file in this file. All the *.d files are included in the
#  Makefile in the root directory AFTER all the makevars.mk's are include.
#  	b) So far, only supports CPP files. C support will be added TODO
#  	c) Please refrain from using $(wildcard) command. It only helps when not
#  really nessaccery and complicates the situation when we have forgotten about
#  it. Yes, be explicit. Manually list all the source files here.
#  	d) Dependencies are readily dealt with by the setup of the Makefile. One
#  NEVER needs to specify the dependency for any .o file.
${DIR002}CFILES		:=
${DIR002}CPPFILES	:=	${DIR002}/Utils.cpp
################## DO NOT MODIFY ################
${DIR002}OBJFILES	:=	${${DIR002}CPPFILES:${DIR002}%.cpp=${BUILD}%.o}	\
				${${DIR002}CFILES:${DIR002}%.c=${BUILD}%.o}
${DIR002}DEPFILES	:=	${${DIR002}OBJFILES:%.o=%.d}
${DIR002}ASMFILES	:=	${${DIR002}OBJFILES:${BUILD}%.o=${DEBUG}%.s}
################## DO NOT MODIFY ################ 
###############################################################################
#				STEP 3
#DIRECTORY-SPECIFIC BINARY FILES
#	Executables listed in ${DIR}BINFILES are considered the final output of
#  this project. All of them should be built into ${BIN} instead of ${BUILD}
#  for all other executables. The default build rule for building these
#  output executables is:
#
#		${${DIR002}BINFILES}: ${${DIR002}TSTOBJ} ${${DIR002}OBJFILES} 
#
#  If this is not satisfactory, please specify the build rule(s) manually here.
${DIR002}BINFILES	:=		
${${DIR002}BINFILES}: ${${DIR002}TSTOBJ} ${${DIR002}OBJFILES} 
###############################################################################
#				STEP 4
#DIRECTORY-SPECIFIC TEST FILES
#	Speicify all the test files. All test files must be CPP files. But when
#  listing the them in ${DIR002}TST, do NOT write the .cpp extension. For example:
#  if one wishes to add test-mytest.cpp, he should write:
#
#  		${DIR002}TST:=test-mytest
#
${DIR002}TST	:=		test-Utils
################## DO NOT MODIFY ################
${DIR002}TSTCPP	:=		${${DIR002}TST:%=${DIR002}/%.cpp}
${DIR002}TSTOBJ	:=		${${DIR002}TSTCPP:${DIR002}%.cpp=${BUILD}%.o}
${DIR002}TSTDEP	:=		${${DIR002}TSTOBJ:%.o=%.d}
${DIR002}TSTEXE	:=		${${DIR002}TSTOBJ:%.o=%.exe}
${DIR002}TSTASM	:=		${${DIR002}TSTOBJ:${BUILD}%.o=${DEBUG}%.s}
SRCFILES	:=		${SRCFILES} ${${DIR002}CFILES} ${${DIR002}CPPFILES} ${${DIR002}TSTCPP}
DEPFILES	:=		${DEPFILES} ${${DIR002}DEPFILES} ${${DIR002}TSTDEP}
################## DO NOT MODIFY ################
###############################################################################
#				STEP 5
#	The default build rule for all the files specified in ${DIR002}TST is
#
#		${${DIR002}TSTEXE}: ${${DIR002}TSTOBJ} ${${DIR002}OBJFILES} 
#
#	This is using all the object files generated in this directory plus the
#  object files of the test CPP files. In case where this is either not enough
#  or too much, please modify the following line.
${${DIR002}TSTEXE}: ${${DIR002}TSTOBJ} ${${DIR002}OBJFILES} 
#DIRECTORY-SPECIFIC COMPILING AND LINKING OPTIONS
#  	By default, the local options inherits the corresponding global ones 
#  from the makevars.mk in the root directory. If one wishes to add any 
#  additional options that are specific to this very directory, add them after 
#  the global ones. For example:
# 	 	${DIR002}CFLAGS	:=${CFLAGS} [directory-specific options]
#  	Usually, ${DIR002}INCS and ${DIR002}LIBS should not need to be modified if
#  the build in this directory does not require some extra libraries and/or 
#  hearder files. But in case it did, free at ease to modify these two 
#  variables.
###############################################################################
#				STEP 6
#DIRECTORY-SPECIFIC COMPILING AND LINKING OPTIONS
#	Options specified here are used in this directory. By default, all 
#  builds use the same options. When different compiling and/or linking options 
#  need to be assigned to different targets, the programmer needs to list all
#  the speical target-prerequisite dependencies manually.
${DIR002}CFLAGS 	:=${CFLAGS}
${DIR002}CXXFLAGS	:=${CXXFLAGS}
${DIR002}INCS		:=${INCS}
${DIR002}LIBS		:=${LIBS} 
###############################################################################
#				STEP 7
#	Write whatever dependencies here:



###############################################################################
###############################################################################
###############################################################################
#	Congratulations! You have completed everything you need to do to build
#  this directory. You do not need to modify this file unless some C and/or
#  CPP source files are added, removed, or renamed. In that case, just go over
#  STEP 1-6 again and it is done!
###############################################################################
###############################################################################
###############################################################################
#				WANRING
#  Please do not modify the following part if you are not 100% sure about it.
#  The design of this file is that one only needs to modify the part above.
#  If you find you need to modify any of the parts below, be very careful!
#				WANRING
###############################################################################
###############################################################################
############################################################################### 
#DIR002ECTORY-SPECIFIC PATTERN RULES
#  C++ linkage at the top level
${BUILD}/%.exe: ${BUID}/%.o 
	@echo Linking  "${RED}$@${NONE}"...
	@${CXX} -o $@ ${filter %.o,$^} ${${DIR002}LIBS} 
#  C++ sources
${BUILD}/%.o: ${DIR002}/%.cpp
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CXX} -o $@ -c $< ${${DIR002}CXXFLAGS} ${${DIR002}INCS}
${DEBUG}/%.s: ${DIR002}/%.cpp
	@echo Generating "${CYAN}$@${NONE}"...
	@${CXX} -o $@ $< ${ASMFLAGS} ${${DIR002}CXXFLAGS} ${${DIR002}INCS} 
#  C sources
${BUILD}/%.o: ${DIR002}/%.c
	@echo Compiling "${MAGENTA}$@${NONE}"...
	@${CC} -o $@ -c $< ${${DIR002}CFLAGS} ${${DIR002}INCS}
${DEBUG}/%.s: ${DIR002}/%.c
	@echo Generating "${CYAN}$@${NONE}"...
	@${CC} -o $@ $< ${ASMFLAGS} ${${DIR002}CFLAGS} ${${DIR002}INCS} 
#DIR002ECTORY-SPECIFIC PHONY TARGETS
.PHONY: ${DIR002}-all ${DIR002}-test ${DIR002}-asm ${DIR002}-list
TARGET_ALL	:=${TARGET_ALL} ${DIR002}-all
TARGET_TEST	:=${TARGET_TEST} ${DIR002}-test
TARGET_ASM	:=${TARGET_ASM} ${DIR002}-asm
TARGET_LIST	:=${TARGET_LIST} ${DIR002}-list
${DIR002}-all: ${${DIR002}OBJFILES} ${${DIR002}BINFILES}
	@echo Finished building "${B_BLUE}$@${NONE}".
${DIR002}-test: ${${DIR002}TSTEXE}
	@echo Finished building "${B_BLUE}$@${NONE}".  
${DIR002}-asm: ${${DIR002}ASMFILES} ${${DIR002}TSTASM}
	@echo Finished generating "${B_BLUE}$@${NONE}".  
${DIR002}-list:
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}BEGIN $@${NONE}"\#\#\#\#\#\#\#\#
	@echo "${BROWN}CFILES${NONE}":${${DIR002}CFILES}
	@echo "${BROWN}CPPFILES${NONE}":${${DIR002}CPPFILES}
	@echo "${BROWN}OBJFILES${NONE}":${${DIR002}OBJFILES}
	@echo "${BROWN}DEPFILES${NONE}":${${DIR002}DEPFILES}
	@echo "${BROWN}ASMFILES${NONE}":${${DIR002}ASMFILES}
	@echo "${BROWN}TSTCPP${NONE}":${${DIR002}TSTCPP}
	@echo "${BROWN}TSTOBJ${NONE}":${${DIR002}TSTOBJ}
	@echo "${BROWN}TSTDEP${NONE}":${${DIR002}TSTDEP}
	@echo "${BROWN}TSTEXE${NONE}":${${DIR002}TSTEXE}
	@echo "${BROWN}TSTASM${NONE}":${${DIR002}TSTASM} 
	@echo "${BROWN}BINCPP${NONE}":${${DIR002}BINCPP}
	@echo "${BROWN}BINOBJ${NONE}":${${DIR002}BINOBJ}
	@echo "${BROWN}BINDEP${NONE}":${${DIR002}BINDEP}
	@echo "${BROWN}BINEXE${NONE}":${${DIR002}BINEXE}
	@echo "${BROWN}BINASM${NONE}":${${DIR002}BINASM} 
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}END $@${NONE}"\#\#\#\#\#\#\#\#
