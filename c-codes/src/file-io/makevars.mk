###############################################################################
#  A set of template files to organize projects with a single Makefile
#  Copyright (C) 2013 Zhongming Qu <qzmfrank@umich.edu>
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
###############################################################################
#	Welcome! The comments in this file will guide you through the process.
#  Please read all the comments very carefully before changing anything.
#  	The idea of this set of template files (Makefile, Makefile.vars, and
#  all the makevars.mk) is to help organize any C/C++ project with a single
#  Makefile. 
#  	Usually the advantage of a single Makefile is speed and easy parallel
#  make. The usual drawbacks are bad maintainability and modularity. This 
#  set of files attempt to cut down all the repetitive work that are usually 
#  done manually, i.e., listing target-prerequisites, while preserving almost 
#  the same degree of modularity as that can be achieved through the recursive 
#  make approach.
#  	If you have any suggestions and/or ideas, please let me know.
###############################################################################
#				STEP 1
#DIRECTORY NAME FROM THE ROOT DIRECTORY
#	The ${DIR-file-io} variable will be used through the rest of this 
#  makevars.mk file to achieve modularity.
#  	Be very careful:
# 		NO SPACE ( tab is OK )
# 		NO DEFERRED-EVALUATION ( always use colon-equal, i.e., := ) #
DIR-file-io		:=src/file-io# Please, NO SPACE 
# Quiet build for this dirctory. Comment the following to be verbose.
${DIR-file-io}QUIET	:=@
###############################################################################
#				STEP 2
#DIRECTORY-SPECIFIC SOURCE FILES
#
#  	Remember to add the ${DIR-file-io}/ to whatever source files(s) you wish to add.
#  The dependencies are automatically resolved by the dependency files (*.d 
#  files) generated by the compiler through the -MD -MP and/or similar options.
#  Note that:
#  	a) The GNU make does NOT support recursive include directive. So we must
#  NOT include any *.d file in this file. All the *.d files are included in the
#  Makefile in the root directory AFTER all the makevars.mk's are include.
#  	b) So far, only supports C/C++ files. Maybe Fortran support is needed 
#  	c) Please refrain from using $(wildcard) command. It only helps when not
#  really nessaccery and complicates the situation when we have forgotten about
#  it. Yes, be explicit. Manually list all the source files here.
#  	d) Dependencies are readily dealt with by the setup of the Makefile. One
#  Please, you NEVER need to specify the dependency for any .o file. Just list
#  the source files.
${DIR-file-io}CFILES	:=	${DIR-file-io}/file-io.c
${DIR-file-io}CPPFILES	:=	
################## DO NOT MODIFY ################
${DIR-file-io}OBJFILES	:=	${${DIR-file-io}CPPFILES:${DIR-file-io}%.cpp=${BUILD}%.o}	\
				${${DIR-file-io}CFILES:${DIR-file-io}%.c=${BUILD}%.o}
${DIR-file-io}DEPFILES	:=	${${DIR-file-io}OBJFILES:%.o=%.d}
${DIR-file-io}ASMFILES	:=	${${DIR-file-io}OBJFILES:${BUILD}%.o=${DEBUG}%.s}
################## DO NOT MODIFY ################ 
###############################################################################
#				STEP 3
#DIRECTORY-SPECIFIC BINARY FILES
#
#	Executables listed in ${DIR}BINFILES are considered the final output of
#  this project. All of them should be built into ${BIN} instead of ${BUILD}
#  for all other executables. 
#  	So far, only supports CPP source files. 
${DIR-file-io}BIN	:=	mshtodat
${BIN}/mshtodat.exe: ${BUILD}/mshtodat.o ${BUILD}/file-io.o
################## DO NOT MODIFY ################
${DIR-file-io}BINCPP	:=		${${DIR-file-io}BIN:%=${DIR-file-io}/%.cpp}
${DIR-file-io}BINOBJ	:=		${${DIR-file-io}BINCPP:${DIR-file-io}%.cpp=${BUILD}%.o}
${DIR-file-io}BINDEP	:=		${${DIR-file-io}BINOBJ:%.o=%.d}
${DIR-file-io}BINEXE	:=		${${DIR-file-io}BINOBJ:${BUILD}%.o=${BIN}%.exe}
${DIR-file-io}BINASM	:=		${${DIR-file-io}BINOBJ:${BUILD}%.o=${DEBUG}%.s}
################## DO NOT MODIFY ################
###############################################################################
#				STEP 4
#DIRECTORY-SPECIFIC TEST FILES

#	Speicify all the test files. All test files must be CPP files. But when
#  listing the them in ${DIR-file-io}TST, do NOT write the .cpp extension. For example:
#  if one wishes to add test-mytest.cpp, he should write:
#
#  		${DIR-file-io}TST:=test-mytest
#
#	Then list all the build rules right afterwards. For example:
#
#		${BUILD}/test-mytest.exe:	${BUILD}/test-mytest.o		\
#						${BUILD}/any-other-files.o
${DIR-file-io}TST	:=		test-file-io
${BUILD}/test-file-io.exe: 	${BUILD}/test-file-io.o ${BUILD}/file-io.o
################## DO NOT MODIFY ################
${DIR-file-io}TSTCPP	:=		${${DIR-file-io}TST:%=${DIR-file-io}/%.cpp}
${DIR-file-io}TSTOBJ	:=		${${DIR-file-io}TSTCPP:${DIR-file-io}%.cpp=${BUILD}%.o}
${DIR-file-io}TSTDEP	:=		${${DIR-file-io}TSTOBJ:%.o=%.d}
${DIR-file-io}TSTEXE	:=		${${DIR-file-io}TSTOBJ:%.o=%.exe}
${DIR-file-io}TSTASM	:=		${${DIR-file-io}TSTOBJ:${BUILD}%.o=${DEBUG}%.s}
SRCFILES	:=		${SRCFILES} ${${DIR-file-io}CFILES} ${${DIR-file-io}CPPFILES} ${${DIR-file-io}TSTCPP} ${${DIR-file-io}BINCPP}
DEPFILES	:=		${DEPFILES} ${${DIR-file-io}DEPFILES} ${${DIR-file-io}TSTDEP} ${${DIR-file-io}BINDEP}
################## DO NOT MODIFY ################
###############################################################################
#				STEP 5
#DIRECTORY-SPECIFIC COMPILING AND LINKING OPTIONS
#
#	Options specified here are used in this directory. By default, all 
#  builds use the same options. When different compiling and/or linking options 
#  need to be assigned to different targets, the programmer needs to list all
#  the speical target-prerequisite dependencies manually.
#  	By default, the local options inherits the corresponding global ones 
#  from the Makefile.vars in the root directory. If one wishes to add any 
#  additional options that are specific to this very directory, add them after 
#  the global ones. For example:
# 	 	${DIR-file-io}CFLAGS	:=${CFLAGS} [directory-specific options]
#  	Usually, ${DIR-file-io}INCS and should not need to be modified if
#  the build in this directory does not require some extra libraries and/or 
#  hearder files. But in case it did, free at ease to modify these two 
#  variables.
${DIR-file-io}CFLAGS 	:=${CFLAGS}
${DIR-file-io}CXXFLAGS	:=${CXXFLAGS}
${DIR-file-io}INCS		:=${INCS}
###############################################################################
#				STEP 6
#	Write whatever special dependencies that do not fit into any pattern
#  rules here:






###############################################################################
###############################################################################
###############################################################################
#	Congratulations! You have completed everything you need to do to build
#  this directory. You do not need to modify this file unless some C and/or
#  CPP source files are added, removed, or renamed. In that case, just go over
#  STEP 1-6 again and it is done!
###############################################################################
###############################################################################
###############################################################################
#				WANRING
#  Please do not modify the following part if you are not 100% sure about it.
#  The design of this file is that one only needs to modify the part above.
#  If you find you need to modify any of the parts below, be very careful!
#				WANRING
###############################################################################
###############################################################################
############################################################################### 
#DIRECTORY-SPECIFIC PATTERN RULES
#
#	C++ linkage at the top level is done in the Makefile.vars in the root 
#  directory. Any special build rules for libraries and executables should be
#  secified in STEP 6 in this makevars.mk file.

#  C++ sources
${BUILD}/%.o: ${DIR-file-io}/%.cpp
	@echo Compiling "${GREEN}$@${NONE}"...
	${${DIR-file-io}QUIET}${CXX} -o $@ -c $< ${${DIR-file-io}CXXFLAGS} ${${DIR-file-io}INCS}
${DEBUG}/%.s: ${DIR-file-io}/%.cpp
	@echo Generating "${CYAN}$@${NONE}"...
	${${DIR-file-io}QUIET}${CXX} -o $@ $< ${ASMFLAGS} ${${DIR-file-io}CXXFLAGS} ${${DIR-file-io}INCS} 
#  C sources
${BUILD}/%.o: ${DIR-file-io}/%.c
	@echo Compiling "${GREEN}$@${NONE}"...
	${${DIR-file-io}QUIET}${CC} -o $@ -c $< ${${DIR-file-io}CFLAGS} ${${DIR-file-io}INCS}
${DEBUG}/%.s: ${DIR-file-io}/%.c
	@echo Generating "${CYAN}$@${NONE}"...
	${${DIR-file-io}QUIET}${CC} -o $@ $< ${ASMFLAGS} ${${DIR-file-io}CFLAGS} ${${DIR-file-io}INCS} 
#DIR-file-ioECTORY-SPECIFIC PHONY TARGETS
.PHONY: ${DIR-file-io}-all ${DIR-file-io}-test ${DIR-file-io}-asm ${DIR-file-io}-list
TARGET_ALL	:=${TARGET_ALL} ${DIR-file-io}-all
TARGET_TEST	:=${TARGET_TEST} ${DIR-file-io}-test
TARGET_ASM	:=${TARGET_ASM} ${DIR-file-io}-asm
TARGET_LIST	:=${TARGET_LIST} ${DIR-file-io}-list
${DIR-file-io}-all: ${${DIR-file-io}OBJFILES} ${${DIR-file-io}BINEXE}
	@echo Finished building "${B_BLUE}$@${NONE}".
${DIR-file-io}-test: ${${DIR-file-io}TSTEXE}
	@echo Finished building "${B_BLUE}$@${NONE}".  
${DIR-file-io}-asm: ${${DIR-file-io}ASMFILES} ${${DIR-file-io}TSTASM}
	@echo Finished generating "${B_BLUE}$@${NONE}".  
${DIR-file-io}-list:
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}BEGIN $@${NONE}"\#\#\#\#\#\#\#\#
	@echo "${BROWN}CFILES${NONE}":${${DIR-file-io}CFILES}
	@echo "${BROWN}CPPFILES${NONE}":${${DIR-file-io}CPPFILES}
	@echo "${BROWN}OBJFILES${NONE}":${${DIR-file-io}OBJFILES}
	@echo "${BROWN}DEPFILES${NONE}":${${DIR-file-io}DEPFILES}
	@echo "${BROWN}ASMFILES${NONE}":${${DIR-file-io}ASMFILES}
	@echo "${BROWN}TSTCPP${NONE}":${${DIR-file-io}TSTCPP}
	@echo "${BROWN}TSTOBJ${NONE}":${${DIR-file-io}TSTOBJ}
	@echo "${BROWN}TSTDEP${NONE}":${${DIR-file-io}TSTDEP}
	@echo "${BROWN}TSTEXE${NONE}":${${DIR-file-io}TSTEXE}
	@echo "${BROWN}TSTASM${NONE}":${${DIR-file-io}TSTASM} 
	@echo "${BROWN}BINCPP${NONE}":${${DIR-file-io}BINCPP}
	@echo "${BROWN}BINOBJ${NONE}":${${DIR-file-io}BINOBJ}
	@echo "${BROWN}BINDEP${NONE}":${${DIR-file-io}BINDEP}
	@echo "${BROWN}BINEXE${NONE}":${${DIR-file-io}BINEXE}
	@echo "${BROWN}BINASM${NONE}":${${DIR-file-io}BINASM} 
	@echo \#\#\#\#\#\#\#\#"${B_BROWN}END $@${NONE}"\#\#\#\#\#\#\#\#
